(include "def.dlr")
(include "hashmap.dlr")
(include "quote.dlr")
(include "arithmetics.dlr")
(include "layer.dlr")
(include "funoverload.dlr")

(defun rlpl () void (progn
  (var buf chararray)
  (var filename chararray)
  (:= n 0)
  (loop 1 (progn
    (printf "> \n")
    (assign (ptr-deref buf) 0)
    (fgets buf 1024 stdin)
    (cond (not (ptr-deref (add buf 1))) (progn
      (puts "")
      (break)))
    (snprintf filename 1024 "<repl-%i>" n)
    (:= list (lower-now (car (read-string buf filename))))
    (printf "< [%s|%s|%s|%s]\n" (get-expression list) (get-context list) (get-global list) (get-header list))
    (assign n (add n 1))))))

(defmacro run (progn (rlpl) (make-cexp "" "" "" "")))
(run)

