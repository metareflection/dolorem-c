(defmacro generate-arithmetic-operator
 (call-macro "lower" (quasiquote defmacro (quasiunquote (car args)) (progn
    (:= left (lower-now (car args)))
    (:= right (lower-now (car (cdr args))))
    (add-cexp left right)
    (set-expression left (print-to-mem (quasiunquote (car (cdr args))) (get-expression left) (get-expression right)))
   left))))

(generate-arithmetic-operator add "(%s) + (%s)")
(generate-arithmetic-operator sub "(%s) - (%s)")
(generate-arithmetic-operator mul "(%s) * (%s)")
(generate-arithmetic-operator divi "(%s) / (%s)")
(generate-arithmetic-operator equals "(%s) == (%s)")
(generate-arithmetic-operator nequals "(%s) == (%s)")

